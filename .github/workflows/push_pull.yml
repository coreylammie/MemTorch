name: CI
on:
  push:
    tags-ignore:
      - "v*"
  pull_request:
jobs:
  linter:
    name: Validate code formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Check Files Using the Black Formatter
        uses: rickstaa/action-black@v1
        id: action_black
        with:
          black_args: "."
      - name: Check files Using the Clang Formatter
        uses: DoozyX/clang-format-lint-action@v0.12
        id: action_clang
        with:
          source: "memtorch/cpp memtorch/cu"
          extensions: "h,cpp,c,cu"
          clangFormatVersion: 12
          inplace: True
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        id: action_pull_request
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Enforced Python/C++/CUDA Code Formatting with Black and Clang"
          commit-message: ":art: Enforced Python/C++/CUDA Code Formatting with Black and Clang"
          body: |
            There appear to be some python formatting errors in ${{ github.sha }}. This automatically generated pull request uses the [psf/black](https://github.com/psf/black) and [clang](https://clang.llvm.org/docs/ClangFormat.html) formatters to fix these issues.
          base: ${{ github.head_ref }}
          branch: actions/lint
  unit_test:
    name: Run unit tests
    needs: linter
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.7, 3.8, 3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Dependencies
        run: |
          git submodule update --init --recursive
          python -m pip install --upgrade pip
          python -m pip install black pytest
          python -m pip install -r requirements.txt
          python setup.py install
      - name: pytest
        run: |
          pytest
  codecov:
    name: Determine code coverage
    needs: unit_test
    runs-on: ubuntu-latest
    env:
      OS: ${{ matrix.os }}
      PYTHON: "3.7"
    steps:
      - uses: actions/checkout@master
      - name: Setup Python 3.7
        uses: actions/setup-python@master
        with:
          python-version: 3.7
      - name: Generate Coverage Report
        run: |
          pip install pytest
          pip install codecov
          pip install pytest-cov
          git submodule update --init --recursive
          python -m pip install -r requirements.txt
          python setup.py install
          pytest --cov=./ --cov-report=xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          files: coverage.xml
          directory: ./coverage/reports/
          flags: unittests
          env_vars: OS,PYTHON
          name: codecov-umbrella
          fail_ci_if_error: true
          path_to_write_report: ./coverage/codecov_report.txt
          verbose: true
